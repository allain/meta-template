#!/usr/bin/env node

const program = require('commander')
const debug = require('debug')('meta-template-apply')
const co = require('co')
const ncp = require('ncp')
const fs = require('fs')
const path = require('path')
const getFilesFromDir = require('../lib/getFilesFromDir')
const parseFilesForTemplateVariables = require('../lib/parseFilesForTemplateVariables')
const getUserInputMap = require('../lib/getUserInputMap')
const replace = require('stream-replace')
const gitignored = require('../lib/gitignored')

const Readable = require('stream').Readable

const usage = `\n  usage:\n\n    meta template apply <srcTemplateDir> <destProjectDir>\n`;

if ( ! process.argv[2] || process.argv[2] === '--help')
  return console.log(usage)

const srcTemplateDir = process.argv[2] === 'blank' ?
                      process.argv[3] :
                      process.argv[2]

const destProjectDir = process.argv[3] === 'blank' ?
                      process.argv[4] :
                      process.argv[3]

if ( ! srcTemplateDir || ! destProjectDir) return console.log(usage)

console.log(`meta template applying \'${srcTemplateDir}\' to '${destProjectDir}'`)

// First, let's parse each file in the srcTemplateDir, and find all of the
// template variables

const run = co.wrap(function *() {
  const templateFiles = yield getFilesFromDir(srcTemplateDir);
  const templateVariables = parseFilesForTemplateVariables(templateFiles)

  console.log(`Found the following template variables:\n\n\t ${templateVariables}\n`)

  const userValues = yield getUserInputMap(templateVariables)

  const gitignoredArr = gitignored.getGitignored(path.join(process.cwd(), srcTemplateDir, '.gitignore'))
  const gitignoreRegExp = gitignored.gitignoreRegExp(gitignoredArr)

  ncp(path.resolve(process.cwd(), srcTemplateDir), path.resolve(process.cwd(), destProjectDir), {
    clobber: true,
    filter: function(fileName) {
      return !gitignoreRegExp.test(fileName)
    },
    rename: function(target) {
      Object.keys(userValues).forEach((templateVariable) => {
        if (target.indexOf(`{[${templateVariable}]}`) > -1) {
          target = target.replace(`{[${templateVariable}]}`, userValues[templateVariable])
        }
      })

      return target;
    },
    transform: function(read, write, file) {

      var s = new Readable()
      s._read = function noop() {}

      if (!gitignoreRegExp.test(file.name)) {
        let fileString = fs.readFileSync(file.name, 'utf-8')

        Object.keys(userValues).forEach((key) => {
          let regex = new RegExp(`\\{\\[${key}\\]\\}`, 'g')
          fileString = fileString.replace(regex, userValues[key])
        })

        s.push(fileString)
      }

      s.push(null)
      s.pipe(write)
    }
  }, function(err) {
    if (err) throw new Error(err)
    console.log('Template Applied')
  })
})

run()